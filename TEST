drop procedure if exists testTable;
delimiter $$
create procedure testTable(
    title_param VARCHAR(255), 
releaseYear_param VARCHAR(255),
ageRating_param VARCHAR(255),
pub_param VARCHAR(255),
dev_param VARCHAR(255)
)
create temporary table tmp 
insert into tmp(Title, Release_Year, Age_Rating, Publisher, Developer)
select
v.Title, v.Release_Year, v.Age_Rating, v.Publisher, v.Developer 
from Video_Games v where (v.Age_Rating != 'T') and (v.Age_Rating != 'M');
end $$
delimiter ;

drop procedure if exists getUserCred;
delimiter $$
create procedure getUserCred(IN userID_p varchar(255))
begin
select*
from Users
where User_ID = userID_p;
end $$
delimiter ;

//Filters out M-Rated games for users between 13 and 17; can get rid of limit once we know SP works.
drop procedure if exists filterAge17;
delimiter $$
create procedure filterAge17()
begin
drop table if exists VG_AgeFiltered;
create table VG_AgeFiltered as
select* 
from Video_Games g 
where (g.Age_Rating != 'M'); 
end $$
delimiter ;

//Filters out T-rated and M-rated games for users under 13; can get rid of limit once we know SP works.
drop procedure if exists filterAge13;
delimiter $$
create procedure filterAge13()
begin
drop table if exists VG_AgeFiltered;
create table VG_AgeFiltered as
select* 
from Video_Games g 
where (g.Age_Rating != 'T') and (g.Age_Rating != 'M');
end $$
delimiter ;

//Filters out systems the user doesn't own; can get rid of limit once we know SP works.
drop procedure if exists filterSystem;
delimiter $$
create procedure filterSystem(IN systemOwned_p varchar(255))
begin 
drop table if exists VG_AgeandSystemFiltered;
create table VG_AgeandSystemFiltered as
select* 
from VG_AgeFiltered g 
where g.Game_ID in (select m.Game_ID from Made_For m where m.System_Name = systemOwned_p);
end $$
delimiter ;


drop procedure if exists queryFilterSystem;
delimiter $$
create procedure queryFilterSystem()
begin
select * from VG_AgeandSystemFiltered;
end $$
delimiter ;

//Can get rid of limit once we know it works.
delimiter $$
drop procedure if exists filterAnswers;
create procedure filterAnswers(IN rY1_p varchar(255), IN rY2_p varchar(255), 
IN gen_p varchar(255), IN dev_p varchar(255))
begin
drop table if exists VG_AllFiltered;
create table VG_AllFiltered as
select *  
from VG_AgeandSystemFiltered g
where (g.Release_Year >= rY1_p and g.Release_Year <= rY2_p) and 
((g.Developer = dev_P) or (g.Genre = gen_p));
end $$
delimiter ;

delimiter $$
drop procedure if exists queryAllFiltered;
create procedure queryAllFiltered()
begin
select * from VG_AllFiltered;
end $$
delimiter ;

delimiter $$
drop procedure if exists finalOutput;
create procedure finalOutput()
begin
select g.Game_ID, g.Title, s.System_Name, g.Release_Year, g.Age_Rating,
g.Genre, g.Developer, avg(r.Score) as avgScore,
sum(r.Num_of_Reviews) as totalReviews, g.Game_ID
from VG_AllFiltered g
inner join Metacritic_Review r on r.Game_ID = g.Game_ID
inner join Made_For s on s.Game_ID = g.Game_ID 
where g.Game_ID = r.Game_ID and g.Game_ID = s.Game_ID
order by avgScore desc limit 10;
end $$
delimiter ;

drop procedure if exists showPreferences;
delimiter $$
create procedure showPreferences(IN userID_p varchar(255))
begin
select g.Title, g.Release_Year, g.Age_Rating, g.Genre, g.Developer, g.Game_ID
from Video_Games g
where g.Game_ID in (select p.Game_ID from Prefers p where 
p.User_ID in (select u.User_ID from Users u where u.User_ID = userID_p));
end $$
delimiter ;

// Shows system and review info for items in Preferences List on Preferences Screen.
drop procedure if exists showInfo;
delimiter $$
create procedure showInfo(IN userID_p varchar(255), IN title_p varchar(255))
begin 
select s.System_Name, sum(r.Num_of_Reviews) as totrevs, avg(r.Score) as avgrevs
from Video_Games g
inner join Metacritic_Review r on r.Game_ID = g.Game_ID
inner join Made_For s on s.Game_ID = g.Game_ID
where (g.Title = title_p) and 
g.Game_ID in(select p.Game_ID from Prefers p where p.User_ID in 
(select u.User_ID from Users u where u.User_ID = userID_p));
end $$
delimiter ;

// Skips the questionnaire process and shows final output based on Preferences List.
delimiter $$
drop procedure if exists filterPreferences;
create procedure filterPreferences(IN userID_p varchar(255), IN system_p varchar(255),
IN rY1_p bigint, IN rY2_p bigint, IN ageRating_p varchar(255), 
IN gen_p varchar(255), IN dev_p varchar(255))
begin
select g.Title, s.System_Name, g.Release_Year, g.Age_Rating,
g.Genre, g.Developer, avg(r.Score) as avgScore,
sum(r.Num_Reviews) as totalReviews
from Video_Games g
inner join Metacritic_Review r on r.Game_ID = g.Game_ID
inner join Made_For s on s.Game_ID = g.Game_ID
where (g.Age_Rating = ageRating_p) and (s.System_Name = system_p) and 
(((g.Release_Year >= rY1_p) and (g.Release_Year < rY2_p)) or
(g.Developer = dev_p) or (g.Genre = gen_p)) and 
g.Game_ID not in (select p.Game_ID from Prefers p where 
p.User_ID in (select u.User_ID from Users u where 
u.User_ID = userID_p)) 
order by avgScore desc limit 10;
end $$
delimiter ;

delimiter $$
drop procedure if exists updatePrefers;
create procedure updatePrefers(IN userID_p varchar(255),
IN Game_ID_p varchar(255))
begin
INSERT into Prefers(Game_ID,User_ID) Values (@userID_p,@Game_ID_p);
end $$
delimiter;